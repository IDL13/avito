// Code generated by MockGen. DO NOT EDIT.
// Source: requests.go

// Package mock_serv is a generated GoMock package.
package mock_serv

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDb is a mock of Db interface.
type MockDb struct {
	ctrl     *gomock.Controller
	recorder *MockDbMockRecorder
}

// MockDbMockRecorder is the mock recorder for MockDb.
type MockDbMockRecorder struct {
	mock *MockDb
}

// NewMockDb creates a new mock instance.
func NewMockDb(ctrl *gomock.Controller) *MockDb {
	mock := &MockDb{ctrl: ctrl}
	mock.recorder = &MockDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDb) EXPECT() *MockDbMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockDb) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDbMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDb)(nil).Count))
}

// CreateTables mocks base method.
func (m *MockDb) CreateTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTables indicates an expected call of CreateTables.
func (mr *MockDbMockRecorder) CreateTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTables", reflect.TypeOf((*MockDb)(nil).CreateTables))
}

// DeleteDependencies mocks base method.
func (m *MockDb) DeleteDependencies(UserId int, Segments []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDependencies", UserId, Segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDependencies indicates an expected call of DeleteDependencies.
func (mr *MockDbMockRecorder) DeleteDependencies(UserId, Segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDependencies", reflect.TypeOf((*MockDb)(nil).DeleteDependencies), UserId, Segments)
}

// DeleteSegment mocks base method.
func (m *MockDb) DeleteSegment(segment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockDbMockRecorder) DeleteSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockDb)(nil).DeleteSegment), segment)
}

// DeleteUser mocks base method.
func (m *MockDb) DeleteUser(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDbMockRecorder) DeleteUser(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDb)(nil).DeleteUser), name)
}

// InserSegment mocks base method.
func (m *MockDb) InserSegment(segment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InserSegment", segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// InserSegment indicates an expected call of InserSegment.
func (mr *MockDbMockRecorder) InserSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InserSegment", reflect.TypeOf((*MockDb)(nil).InserSegment), segment)
}

// InsertDependencies mocks base method.
func (m *MockDb) InsertDependencies(UserId int, Segments []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDependencies", UserId, Segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDependencies indicates an expected call of InsertDependencies.
func (mr *MockDbMockRecorder) InsertDependencies(UserId, Segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDependencies", reflect.TypeOf((*MockDb)(nil).InsertDependencies), UserId, Segments)
}

// InsertUser mocks base method.
func (m *MockDb) InsertUser(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDbMockRecorder) InsertUser(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDb)(nil).InsertUser), name)
}

// RandChoice mocks base method.
func (m *MockDb) RandChoice(counter int, segment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandChoice", counter, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// RandChoice indicates an expected call of RandChoice.
func (mr *MockDbMockRecorder) RandChoice(counter, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandChoice", reflect.TypeOf((*MockDb)(nil).RandChoice), counter, segment)
}

// SearchSegmentsForUser mocks base method.
func (m *MockDb) SearchSegmentsForUser() (map[int][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSegmentsForUser")
	ret0, _ := ret[0].(map[int][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSegmentsForUser indicates an expected call of SearchSegmentsForUser.
func (mr *MockDbMockRecorder) SearchSegmentsForUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSegmentsForUser", reflect.TypeOf((*MockDb)(nil).SearchSegmentsForUser))
}

// Mockusers is a mock of users interface.
type Mockusers struct {
	ctrl     *gomock.Controller
	recorder *MockusersMockRecorder
}

// MockusersMockRecorder is the mock recorder for Mockusers.
type MockusersMockRecorder struct {
	mock *Mockusers
}

// NewMockusers creates a new mock instance.
func NewMockusers(ctrl *gomock.Controller) *Mockusers {
	mock := &Mockusers{ctrl: ctrl}
	mock.recorder = &MockusersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockusers) EXPECT() *MockusersMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *Mockusers) DeleteUser(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockusersMockRecorder) DeleteUser(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*Mockusers)(nil).DeleteUser), name)
}

// InsertUser mocks base method.
func (m *Mockusers) InsertUser(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockusersMockRecorder) InsertUser(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*Mockusers)(nil).InsertUser), name)
}

// Mocksegments is a mock of segments interface.
type Mocksegments struct {
	ctrl     *gomock.Controller
	recorder *MocksegmentsMockRecorder
}

// MocksegmentsMockRecorder is the mock recorder for Mocksegments.
type MocksegmentsMockRecorder struct {
	mock *Mocksegments
}

// NewMocksegments creates a new mock instance.
func NewMocksegments(ctrl *gomock.Controller) *Mocksegments {
	mock := &Mocksegments{ctrl: ctrl}
	mock.recorder = &MocksegmentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksegments) EXPECT() *MocksegmentsMockRecorder {
	return m.recorder
}

// DeleteSegment mocks base method.
func (m *Mocksegments) DeleteSegment(segment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MocksegmentsMockRecorder) DeleteSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*Mocksegments)(nil).DeleteSegment), segment)
}

// InserSegment mocks base method.
func (m *Mocksegments) InserSegment(segment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InserSegment", segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// InserSegment indicates an expected call of InserSegment.
func (mr *MocksegmentsMockRecorder) InserSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InserSegment", reflect.TypeOf((*Mocksegments)(nil).InserSegment), segment)
}

// Mockdependencies is a mock of dependencies interface.
type Mockdependencies struct {
	ctrl     *gomock.Controller
	recorder *MockdependenciesMockRecorder
}

// MockdependenciesMockRecorder is the mock recorder for Mockdependencies.
type MockdependenciesMockRecorder struct {
	mock *Mockdependencies
}

// NewMockdependencies creates a new mock instance.
func NewMockdependencies(ctrl *gomock.Controller) *Mockdependencies {
	mock := &Mockdependencies{ctrl: ctrl}
	mock.recorder = &MockdependenciesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdependencies) EXPECT() *MockdependenciesMockRecorder {
	return m.recorder
}

// DeleteDependencies mocks base method.
func (m *Mockdependencies) DeleteDependencies(UserId int, Segments []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDependencies", UserId, Segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDependencies indicates an expected call of DeleteDependencies.
func (mr *MockdependenciesMockRecorder) DeleteDependencies(UserId, Segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDependencies", reflect.TypeOf((*Mockdependencies)(nil).DeleteDependencies), UserId, Segments)
}

// InsertDependencies mocks base method.
func (m *Mockdependencies) InsertDependencies(UserId int, Segments []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDependencies", UserId, Segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDependencies indicates an expected call of InsertDependencies.
func (mr *MockdependenciesMockRecorder) InsertDependencies(UserId, Segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDependencies", reflect.TypeOf((*Mockdependencies)(nil).InsertDependencies), UserId, Segments)
}

// SearchSegmentsForUser mocks base method.
func (m *Mockdependencies) SearchSegmentsForUser() (map[int][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSegmentsForUser")
	ret0, _ := ret[0].(map[int][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchSegmentsForUser indicates an expected call of SearchSegmentsForUser.
func (mr *MockdependenciesMockRecorder) SearchSegmentsForUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSegmentsForUser", reflect.TypeOf((*Mockdependencies)(nil).SearchSegmentsForUser))
}

// Mocktools is a mock of tools interface.
type Mocktools struct {
	ctrl     *gomock.Controller
	recorder *MocktoolsMockRecorder
}

// MocktoolsMockRecorder is the mock recorder for Mocktools.
type MocktoolsMockRecorder struct {
	mock *Mocktools
}

// NewMocktools creates a new mock instance.
func NewMocktools(ctrl *gomock.Controller) *Mocktools {
	mock := &Mocktools{ctrl: ctrl}
	mock.recorder = &MocktoolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktools) EXPECT() *MocktoolsMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *Mocktools) Count() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MocktoolsMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*Mocktools)(nil).Count))
}

// CreateTables mocks base method.
func (m *Mocktools) CreateTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTables indicates an expected call of CreateTables.
func (mr *MocktoolsMockRecorder) CreateTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTables", reflect.TypeOf((*Mocktools)(nil).CreateTables))
}

// RandChoice mocks base method.
func (m *Mocktools) RandChoice(counter int, segment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandChoice", counter, segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// RandChoice indicates an expected call of RandChoice.
func (mr *MocktoolsMockRecorder) RandChoice(counter, segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandChoice", reflect.TypeOf((*Mocktools)(nil).RandChoice), counter, segment)
}
